// Time complexity : O(nlogn)
#include <bits/stdc++.h>
using namespace std;

void heapify(int a[],int n,int i)
{
    int largest = i;
    int leftchild = 2 * i + 1;
    int rightchild = 2 * i + 2;
    
    if(leftchild < n && a[leftchild] > a[largest])
    largest = leftchild;
    
    if(rightchild < n && a[rightchild] > a[largest])
    largest = rightchild;
    
    if(largest != i)
    {
        swap(a[i],a[largest]);
        heapify(a,n,largest);
    }
}

void heapSort(int a[],int n)
{
    //Build heap
    for(int i=n/2 - 1; i>=0; i--)
    heapify(a,n,i);
    
    //remove element from heap one by one 
    for(int i = n - 1 ; i>=0 ; i--)
    {
        //swap root with last node
        swap(a[0] , a[i]);
        
        //call heapify for reduced heap 
        heapify(a,i,0);
    }
}
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
   
   heapSort(arr,n);
   
   printf("Sorted array : ");
   for(int i=0;i<n;i++)
   printf("%d ",arr[i]);

    return 0;
}
